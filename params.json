{"name":"Doop Framework 101","tagline":"Tutorial site for PLDI 2015","body":"### So what is Doop?\r\n[Doop](http://doop.program-analysis.org/) is a **declarative** framework for Static Pointer Analysis of Java programs. It provides a huge variety of analyses and also all the surrounding scaffolding to run an analysis end-to-end (fact generation, processing, statistics and metrics, etc).\r\n\r\nThe declarative nature of Doop stems form the fact that is uses **Datalog** (or more specifically *LogiQL*, a Datalog dialog developped by [LogicBlox](http://www.logicblox.com/)) to specify an analysis.\r\n\r\nThe building blocks come in the form of **predicates**. Our facts (a.k.a *EDB* logic) are represented as such. E.g. `Person(\"John\")` or `Parent(\"John\", \"Johnny jr\")`.\r\n\r\nThen we have **rules** (a.k.a *IDB* logic) to infer new information. When a set of things are known to be true then we can infer new things. This continues until no new information can be extracted.\r\n\r\n     Ancestor(x, y) <- Parent(x, y).\r\n\r\n### Setup\r\n```\r\n$ cd doop_root_folder\r\n$ source environment.sh\r\n$ cd doop\r\n```\r\n\r\n### Toy Example\r\nWe want to compute the ancestors for a set of people. We invoke actions on our Datalog engine using `bloxbatch`.\r\n\r\n````\r\n$ bloxbatch -db DB -create -overwrite               # create our database\r\n$ bloxbatch -db DB -addBlock -file ancestor.logic   # load our rules\r\n$ bloxbatch -db DB -execute -file facts.logic       # load our facts\r\n```\r\n\r\ne\r\n\r\n    VarPointsTo(?heap, ?var) <-\r\n       AssignHeapAllocation(?heap, ?var).\r\n\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at https://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}